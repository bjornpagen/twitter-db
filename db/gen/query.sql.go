// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: query.sql

package gen

import (
	"context"
)

const addFavorite = `-- name: AddFavorite :exec
INSERT OR IGNORE INTO favorite (user_id, tweet_id)
VALUES (?, ?)
`

type AddFavoriteParams struct {
	UserID  string
	TweetID string
}

func (q *Queries) AddFavorite(ctx context.Context, arg AddFavoriteParams) error {
	_, err := q.db.ExecContext(ctx, addFavorite, arg.UserID, arg.TweetID)
	return err
}

const addFollow = `-- name: AddFollow :exec
INSERT OR REPLACE INTO follow (user_id, follower_id)
VALUES (?, ?)
`

type AddFollowParams struct {
	UserID     string
	FollowerID string
}

func (q *Queries) AddFollow(ctx context.Context, arg AddFollowParams) error {
	_, err := q.db.ExecContext(ctx, addFollow, arg.UserID, arg.FollowerID)
	return err
}

const addMediaUrl = `-- name: AddMediaUrl :exec
INSERT OR IGNORE INTO media_urls (tweet_history_id, url)
VALUES (?, ?)
`

type AddMediaUrlParams struct {
	TweetHistoryID int64
	Url            string
}

func (q *Queries) AddMediaUrl(ctx context.Context, arg AddMediaUrlParams) error {
	_, err := q.db.ExecContext(ctx, addMediaUrl, arg.TweetHistoryID, arg.Url)
	return err
}

const addRetweet = `-- name: AddRetweet :exec
INSERT OR IGNORE INTO retweet (user_id, tweet_id)
VALUES (?, ?)
`

type AddRetweetParams struct {
	UserID  string
	TweetID string
}

func (q *Queries) AddRetweet(ctx context.Context, arg AddRetweetParams) error {
	_, err := q.db.ExecContext(ctx, addRetweet, arg.UserID, arg.TweetID)
	return err
}

const addTweet = `-- name: AddTweet :exec
INSERT OR IGNORE INTO tweets (tweet_id, user_id)
VALUES (?, ?)
`

type AddTweetParams struct {
	TweetID string
	UserID  string
}

func (q *Queries) AddTweet(ctx context.Context, arg AddTweetParams) error {
	_, err := q.db.ExecContext(ctx, addTweet, arg.TweetID, arg.UserID)
	return err
}

const addTweetHistory = `-- name: AddTweetHistory :one
INSERT INTO tweet_history (
	tweet_id,
	user_id,
	creation_date,
	text,
	language,
	favorite_count,
	retweet_count,
	reply_count,
	quote_count,
	retweet,
	views,
	timestamp,
	video_view_count,
	expanded_url,
	conversation_id
) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
RETURNING id
`

type AddTweetHistoryParams struct {
	TweetID        string
	UserID         string
	CreationDate   string
	Text           string
	Language       string
	FavoriteCount  int64
	RetweetCount   int64
	ReplyCount     int64
	QuoteCount     int64
	Retweet        int64
	Views          int64
	Timestamp      int64
	VideoViewCount int64
	ExpandedUrl    string
	ConversationID string
}

func (q *Queries) AddTweetHistory(ctx context.Context, arg AddTweetHistoryParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, addTweetHistory,
		arg.TweetID,
		arg.UserID,
		arg.CreationDate,
		arg.Text,
		arg.Language,
		arg.FavoriteCount,
		arg.RetweetCount,
		arg.ReplyCount,
		arg.QuoteCount,
		arg.Retweet,
		arg.Views,
		arg.Timestamp,
		arg.VideoViewCount,
		arg.ExpandedUrl,
		arg.ConversationID,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const addUser = `-- name: AddUser :exec
INSERT OR IGNORE INTO users (user_id, creation_date, timestamp)
VALUES (?, ?, ?)
`

type AddUserParams struct {
	UserID       string
	CreationDate string
	Timestamp    int64
}

func (q *Queries) AddUser(ctx context.Context, arg AddUserParams) error {
	_, err := q.db.ExecContext(ctx, addUser, arg.UserID, arg.CreationDate, arg.Timestamp)
	return err
}

const addUserHistory = `-- name: AddUserHistory :one
INSERT INTO user_history (
	user_id,
	username,
	name,
	follower_count,
	following_count,
	favourites_count,
	is_private,
	is_verified,
	is_blue_verified,
	location,
	profile_pic_url,
	profile_banner_url,
	description,
	external_url,
	number_of_tweets,
	bot,
	has_nft_avatar,
	default_profile,
	default_image
) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
RETURNING id
`

type AddUserHistoryParams struct {
	UserID           string
	Username         string
	Name             string
	FollowerCount    int64
	FollowingCount   int64
	FavouritesCount  int64
	IsPrivate        int64
	IsVerified       int64
	IsBlueVerified   int64
	Location         string
	ProfilePicUrl    string
	ProfileBannerUrl string
	Description      string
	ExternalUrl      string
	NumberOfTweets   int64
	Bot              int64
	HasNftAvatar     int64
	DefaultProfile   int64
	DefaultImage     int64
}

func (q *Queries) AddUserHistory(ctx context.Context, arg AddUserHistoryParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, addUserHistory,
		arg.UserID,
		arg.Username,
		arg.Name,
		arg.FollowerCount,
		arg.FollowingCount,
		arg.FavouritesCount,
		arg.IsPrivate,
		arg.IsVerified,
		arg.IsBlueVerified,
		arg.Location,
		arg.ProfilePicUrl,
		arg.ProfileBannerUrl,
		arg.Description,
		arg.ExternalUrl,
		arg.NumberOfTweets,
		arg.Bot,
		arg.HasNftAvatar,
		arg.DefaultProfile,
		arg.DefaultImage,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const addVideoUrl = `-- name: AddVideoUrl :exec
INSERT OR IGNORE INTO video_urls (tweet_history_id, bitrate, content_type, url)
VALUES (?, ?, ?, ?)
`

type AddVideoUrlParams struct {
	TweetHistoryID int64
	Bitrate        int64
	ContentType    string
	Url            string
}

func (q *Queries) AddVideoUrl(ctx context.Context, arg AddVideoUrlParams) error {
	_, err := q.db.ExecContext(ctx, addVideoUrl,
		arg.TweetHistoryID,
		arg.Bitrate,
		arg.ContentType,
		arg.Url,
	)
	return err
}

const getFavoriteTweetIDs = `-- name: GetFavoriteTweetIDs :many
SELECT tweet_id FROM favorite
WHERE user_id = ?
`

func (q *Queries) GetFavoriteTweetIDs(ctx context.Context, userID string) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getFavoriteTweetIDs, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var tweet_id string
		if err := rows.Scan(&tweet_id); err != nil {
			return nil, err
		}
		items = append(items, tweet_id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFavoriteUserIDs = `-- name: GetFavoriteUserIDs :many
SELECT user_id FROM favorite
WHERE tweet_id = ?
`

func (q *Queries) GetFavoriteUserIDs(ctx context.Context, tweetID string) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getFavoriteUserIDs, tweetID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var user_id string
		if err := rows.Scan(&user_id); err != nil {
			return nil, err
		}
		items = append(items, user_id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFollowerIDs = `-- name: GetFollowerIDs :many
SELECT follower_id FROM follow
WHERE user_id = ?
`

func (q *Queries) GetFollowerIDs(ctx context.Context, userID string) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getFollowerIDs, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var follower_id string
		if err := rows.Scan(&follower_id); err != nil {
			return nil, err
		}
		items = append(items, follower_id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFollowingIDs = `-- name: GetFollowingIDs :many
SELECT user_id FROM follow
WHERE follower_id = ?
`

func (q *Queries) GetFollowingIDs(ctx context.Context, followerID string) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getFollowingIDs, followerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var user_id string
		if err := rows.Scan(&user_id); err != nil {
			return nil, err
		}
		items = append(items, user_id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLatestTweetHistory = `-- name: GetLatestTweetHistory :one
SELECT id, tweet_id, user_id, row_created, creation_date, text, language, favorite_count, retweet_count, reply_count, quote_count, retweet, views, timestamp, video_view_count, expanded_url, conversation_id FROM tweet_history
WHERE tweet_id = ?
ORDER BY timestamp DESC LIMIT 1
`

func (q *Queries) GetLatestTweetHistory(ctx context.Context, tweetID string) (TweetHistory, error) {
	row := q.db.QueryRowContext(ctx, getLatestTweetHistory, tweetID)
	var i TweetHistory
	err := row.Scan(
		&i.ID,
		&i.TweetID,
		&i.UserID,
		&i.RowCreated,
		&i.CreationDate,
		&i.Text,
		&i.Language,
		&i.FavoriteCount,
		&i.RetweetCount,
		&i.ReplyCount,
		&i.QuoteCount,
		&i.Retweet,
		&i.Views,
		&i.Timestamp,
		&i.VideoViewCount,
		&i.ExpandedUrl,
		&i.ConversationID,
	)
	return i, err
}

const getLatestUserHistory = `-- name: GetLatestUserHistory :one
SELECT id, user_id, row_created, username, name, follower_count, following_count, favourites_count, is_private, is_verified, is_blue_verified, location, profile_pic_url, profile_banner_url, description, external_url, number_of_tweets, bot, has_nft_avatar, default_profile, default_image FROM user_history
WHERE user_id = ?
ORDER BY row_created DESC LIMIT 1
`

func (q *Queries) GetLatestUserHistory(ctx context.Context, userID string) (UserHistory, error) {
	row := q.db.QueryRowContext(ctx, getLatestUserHistory, userID)
	var i UserHistory
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.RowCreated,
		&i.Username,
		&i.Name,
		&i.FollowerCount,
		&i.FollowingCount,
		&i.FavouritesCount,
		&i.IsPrivate,
		&i.IsVerified,
		&i.IsBlueVerified,
		&i.Location,
		&i.ProfilePicUrl,
		&i.ProfileBannerUrl,
		&i.Description,
		&i.ExternalUrl,
		&i.NumberOfTweets,
		&i.Bot,
		&i.HasNftAvatar,
		&i.DefaultProfile,
		&i.DefaultImage,
	)
	return i, err
}

const getRetweetTweetIDs = `-- name: GetRetweetTweetIDs :many
SELECT tweet_id FROM retweet
WHERE user_id = ?
`

func (q *Queries) GetRetweetTweetIDs(ctx context.Context, userID string) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getRetweetTweetIDs, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var tweet_id string
		if err := rows.Scan(&tweet_id); err != nil {
			return nil, err
		}
		items = append(items, tweet_id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRetweetUserIDs = `-- name: GetRetweetUserIDs :many
SELECT user_id FROM retweet
WHERE tweet_id = ?
`

func (q *Queries) GetRetweetUserIDs(ctx context.Context, tweetID string) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getRetweetUserIDs, tweetID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var user_id string
		if err := rows.Scan(&user_id); err != nil {
			return nil, err
		}
		items = append(items, user_id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTweetIDs = `-- name: GetTweetIDs :many
SELECT tweet_id FROM tweets
WHERE user_id = ?
`

func (q *Queries) GetTweetIDs(ctx context.Context, userID string) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getTweetIDs, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var tweet_id string
		if err := rows.Scan(&tweet_id); err != nil {
			return nil, err
		}
		items = append(items, tweet_id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUser = `-- name: GetUser :one
SELECT user_id, row_created, creation_date, timestamp FROM users
WHERE user_id = ? LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, userID string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, userID)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.RowCreated,
		&i.CreationDate,
		&i.Timestamp,
	)
	return i, err
}
