// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: query.sql

package gen

import (
	"context"
	"database/sql"
)

const addFollow = `-- name: AddFollow :exec
INSERT INTO follow (
	user_id,
	follower_id,
	timestamp
) VALUES (
	?, ?, ?
)
`

type AddFollowParams struct {
	UserID     string
	FollowerID string
	Timestamp  int64
}

func (q *Queries) AddFollow(ctx context.Context, arg AddFollowParams) error {
	_, err := q.db.ExecContext(ctx, addFollow, arg.UserID, arg.FollowerID, arg.Timestamp)
	return err
}

const addTweet = `-- name: AddTweet :exec
INSERT INTO tweets (tweet_id, user_id)
VALUES (?, ?)
`

type AddTweetParams struct {
	TweetID string
	UserID  string
}

func (q *Queries) AddTweet(ctx context.Context, arg AddTweetParams) error {
	_, err := q.db.ExecContext(ctx, addTweet, arg.TweetID, arg.UserID)
	return err
}

const addTweetHistory = `-- name: AddTweetHistory :one
INSERT INTO tweet_history (
	creation_date,
	tweet_id,
	text,
	user_id,
	language,
	favorite_count,
	retweet_count,
	reply_count,
	quote_count,
	retweet,
	views,
	timestamp,
	video_view_count,
	expanded_url,
	conversation_id
) VALUES (
	?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?
) RETURNING id
`

type AddTweetHistoryParams struct {
	CreationDate   string
	TweetID        string
	Text           sql.NullString
	UserID         string
	Language       sql.NullString
	FavoriteCount  sql.NullInt64
	RetweetCount   sql.NullInt64
	ReplyCount     sql.NullInt64
	QuoteCount     sql.NullInt64
	Retweet        sql.NullInt64
	Views          sql.NullInt64
	Timestamp      sql.NullInt64
	VideoViewCount sql.NullInt64
	ExpandedUrl    sql.NullString
	ConversationID sql.NullString
}

func (q *Queries) AddTweetHistory(ctx context.Context, arg AddTweetHistoryParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, addTweetHistory,
		arg.CreationDate,
		arg.TweetID,
		arg.Text,
		arg.UserID,
		arg.Language,
		arg.FavoriteCount,
		arg.RetweetCount,
		arg.ReplyCount,
		arg.QuoteCount,
		arg.Retweet,
		arg.Views,
		arg.Timestamp,
		arg.VideoViewCount,
		arg.ExpandedUrl,
		arg.ConversationID,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const addUser = `-- name: AddUser :exec
INSERT INTO users (user_id)
VALUES (?)
`

func (q *Queries) AddUser(ctx context.Context, userID string) error {
	_, err := q.db.ExecContext(ctx, addUser, userID)
	return err
}

const addUserHistory = `-- name: AddUserHistory :one
INSERT INTO user_history (
	creation_date,
	user_id,
	username,
	name,
	follower_count,
	following_count,
	favourites_count,
	is_private,
	is_verified,
	is_blue_verified,
	location,
	profile_pic_url,
	profile_banner_url,
	description,
	external_url,
	number_of_tweets,
	bot,
	timestamp,
	has_nft_avatar,
	default_profile,
	default_image
) VALUES (
	?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?
) RETURNING id
`

type AddUserHistoryParams struct {
	CreationDate     string
	UserID           string
	Username         string
	Name             string
	FollowerCount    int64
	FollowingCount   int64
	FavouritesCount  int64
	IsPrivate        int64
	IsVerified       int64
	IsBlueVerified   int64
	Location         string
	ProfilePicUrl    string
	ProfileBannerUrl string
	Description      string
	ExternalUrl      string
	NumberOfTweets   int64
	Bot              int64
	Timestamp        int64
	HasNftAvatar     int64
	DefaultProfile   int64
	DefaultImage     int64
}

func (q *Queries) AddUserHistory(ctx context.Context, arg AddUserHistoryParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, addUserHistory,
		arg.CreationDate,
		arg.UserID,
		arg.Username,
		arg.Name,
		arg.FollowerCount,
		arg.FollowingCount,
		arg.FavouritesCount,
		arg.IsPrivate,
		arg.IsVerified,
		arg.IsBlueVerified,
		arg.Location,
		arg.ProfilePicUrl,
		arg.ProfileBannerUrl,
		arg.Description,
		arg.ExternalUrl,
		arg.NumberOfTweets,
		arg.Bot,
		arg.Timestamp,
		arg.HasNftAvatar,
		arg.DefaultProfile,
		arg.DefaultImage,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const deleteFollow = `-- name: DeleteFollow :exec
DELETE FROM follow
WHERE user_id = ? AND follower_id = ?
`

type DeleteFollowParams struct {
	UserID     string
	FollowerID string
}

func (q *Queries) DeleteFollow(ctx context.Context, arg DeleteFollowParams) error {
	_, err := q.db.ExecContext(ctx, deleteFollow, arg.UserID, arg.FollowerID)
	return err
}

const deleteTweet = `-- name: DeleteTweet :exec
DELETE FROM tweets
WHERE tweet_id = ?
`

func (q *Queries) DeleteTweet(ctx context.Context, tweetID string) error {
	_, err := q.db.ExecContext(ctx, deleteTweet, tweetID)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE user_id = ?
`

func (q *Queries) DeleteUser(ctx context.Context, userID string) error {
	_, err := q.db.ExecContext(ctx, deleteUser, userID)
	return err
}

const getFollowers = `-- name: GetFollowers :many
SELECT follower_id FROM follow
WHERE user_id = ?
`

func (q *Queries) GetFollowers(ctx context.Context, userID string) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getFollowers, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var follower_id string
		if err := rows.Scan(&follower_id); err != nil {
			return nil, err
		}
		items = append(items, follower_id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFollowing = `-- name: GetFollowing :many
SELECT user_id FROM follow
WHERE follower_id = ?
`

func (q *Queries) GetFollowing(ctx context.Context, followerID string) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getFollowing, followerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var user_id string
		if err := rows.Scan(&user_id); err != nil {
			return nil, err
		}
		items = append(items, user_id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTweet = `-- name: GetTweet :one
SELECT tweet_id, user_id FROM tweets
WHERE tweet_id = ? LIMIT 1
`

func (q *Queries) GetTweet(ctx context.Context, tweetID string) (Tweet, error) {
	row := q.db.QueryRowContext(ctx, getTweet, tweetID)
	var i Tweet
	err := row.Scan(&i.TweetID, &i.UserID)
	return i, err
}

const getTweetHistory = `-- name: GetTweetHistory :one
SELECT id, tweet_id, user_id, creation_date, text, language, favorite_count, retweet_count, reply_count, quote_count, retweet, views, timestamp, video_view_count, expanded_url, conversation_id FROM tweet_history
WHERE tweet_id = ? ORDER BY timestamp DESC LIMIT 1
`

func (q *Queries) GetTweetHistory(ctx context.Context, tweetID string) (TweetHistory, error) {
	row := q.db.QueryRowContext(ctx, getTweetHistory, tweetID)
	var i TweetHistory
	err := row.Scan(
		&i.ID,
		&i.TweetID,
		&i.UserID,
		&i.CreationDate,
		&i.Text,
		&i.Language,
		&i.FavoriteCount,
		&i.RetweetCount,
		&i.ReplyCount,
		&i.QuoteCount,
		&i.Retweet,
		&i.Views,
		&i.Timestamp,
		&i.VideoViewCount,
		&i.ExpandedUrl,
		&i.ConversationID,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT user_id FROM users
WHERE user_id = ? LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, userID string) (string, error) {
	row := q.db.QueryRowContext(ctx, getUser, userID)
	var user_id string
	err := row.Scan(&user_id)
	return user_id, err
}

const getUserHistory = `-- name: GetUserHistory :one
SELECT id, creation_date, user_id, username, name, follower_count, following_count, favourites_count, is_private, is_verified, is_blue_verified, location, profile_pic_url, profile_banner_url, description, external_url, number_of_tweets, bot, timestamp, has_nft_avatar, default_profile, default_image FROM user_history
WHERE user_id = ? ORDER BY timestamp DESC LIMIT 1
`

func (q *Queries) GetUserHistory(ctx context.Context, userID string) (UserHistory, error) {
	row := q.db.QueryRowContext(ctx, getUserHistory, userID)
	var i UserHistory
	err := row.Scan(
		&i.ID,
		&i.CreationDate,
		&i.UserID,
		&i.Username,
		&i.Name,
		&i.FollowerCount,
		&i.FollowingCount,
		&i.FavouritesCount,
		&i.IsPrivate,
		&i.IsVerified,
		&i.IsBlueVerified,
		&i.Location,
		&i.ProfilePicUrl,
		&i.ProfileBannerUrl,
		&i.Description,
		&i.ExternalUrl,
		&i.NumberOfTweets,
		&i.Bot,
		&i.Timestamp,
		&i.HasNftAvatar,
		&i.DefaultProfile,
		&i.DefaultImage,
	)
	return i, err
}
